import { useEffect, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useBtDevice } from "@/hooks/useBtDevice";
import { useSleep } from "@/hooks/useSleep";
import BLEIcon from "@/public/ble.svg";
import BLEHoverIcon from "@/public/bleHover.svg";

enum PageState {
  LANDING,
  CONNECTED,
  ERROR,
}

const Pair: NextPage = () => {
  const [pageState, setPageState] = useState<PageState>(PageState.LANDING);
  const [text, setText] = useState("");
  const [successWriteData, setSuccessWriteData] = useState(false);
  const [schoolID, setSchoolID] = useState("Loading...");
  const [studentID, setStudentID] = useState("Loading...");
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [loading, setLoading] = useState(false);

  const {
    supportsBluetooth,
    isConnected,
    pairDevice,
    writeStudentID,
    readStudentID,
    readSchoolID,
  } = useBtDevice();
  const { sleep } = useSleep();

  useEffect(() => {
    if (pageState === PageState.LANDING && isConnected) {
      setPageState(PageState.CONNECTED);
      refreshLunchData();
    }
  }, [isConnected, pageState]);

  useEffect(() => {
    if (!supportsBluetooth) setPageState(PageState.ERROR);
  }, [supportsBluetooth]);

  const refreshLunchData = async () => {
    console.log("refreshing lunch data...");
    const schoolID_val = await readSchoolID();
    await sleep();
    const studentID_val = await readStudentID();

    setSchoolID(schoolID_val);
    setStudentID(studentID_val);
  };

  const handleConnect = () => {
    // Connect then set lunch data
    setLoading(true);
    pairDevice()
      .then(() => {
        setLoading(false);
      })
      .catch((e) => {
        console.log(e);
        setLoading(false);
      });
  };

  const handleWriteData = async () => {
    setLoading(true);

    const success = await writeStudentID(text);

    await sleep();
    await refreshLunchData();

    setSuccessWriteData(success);
    setShowConfirmation(true);
    setLoading(false);

    setTimeout(() => {
      setShowConfirmation(false);
      setText("");
    }, 3000);
  };

  return (
    <div className="h-screen overflow-hidden bg-black">
      <Head>
        <title>LunchTrak</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {loading && (
        <div
          role="status"
          className="fixed flex h-full w-full items-center justify-center bg-gray-800 opacity-30"
        >
          <svg
            aria-hidden="true"
            className="mr-2 h-8 w-8 animate-spin fill-blue-600 text-gray-200 dark:text-gray-600"
            viewBox="0 0 100 101"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
              fill="currentColor"
            />
            <path
              d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
              fill="currentFill"
            />
          </svg>
          <span className="sr-only">Loading...</span>
        </div>
      )}
      {!supportsBluetooth && (
        <div className="flex h-full w-full items-center justify-center">
          <div className="m-10 text-center text-lg">
            Sorry, this browser does not support bluetooth. Use <b>Chrome</b> or{" "}
            <b>Edge</b> on a laptop or an android device instead
            <br />
            <a
              className="text-blue-400 underline"
              href="https://caniuse.com/web-bluetooth"
            >
              Learn More
            </a>
            <br />
          </div>
          <div className="fixed bottom-0 m-5">
            If you do not have access to a laptop or android device, download{" "}
            <a
              className="text-blue-400 underline"
              href="https://apps.apple.com/us/app/bluefy-web-ble-browser/id1492822055"
            >
              Bluefy Browser
            </a>{" "}
            on the App Store
          </div>
        </div>
      )}
      {isConnected && (
        <div className="fixed right-0 bottom-0 z-10 p-10">
          <div
            className={`group flex h-full w-full rounded-lg bg-gradient-to-r from-gray-300 to-white p-2 ${
              showConfirmation ? "p-5" : "hover:p-5"
            } transition-all duration-100 ease-in-out`}
          >
            <div
              className={`${
                showConfirmation ? "flex" : "hidden"
              } flex-col items-center justify-center px-3 text-black group-hover:flex md:px-10`}
            >
              <div className="text-left text-xl">Device Data</div>
              <div className="text-md text-left md:text-lg">
                School ID: {schoolID}
              </div>
              <div className="text-md text-left md:text-lg">
                Student ID: {studentID}
              </div>
            </div>
            <div className="flex flex-col items-center justify-center">
              <div
                className={`${showConfirmation && "hidden"} group-hover:hidden`}
              >
                <Image width={80} height={80} src={BLEIcon} alt="connected" />
                <div className="text-md text-black">Connected</div>
              </div>
              <div
                className={`${
                  showConfirmation ? "" : "hidden"
                } group-hover:block`}
              >
                <Image
                  width={80}
                  height={80}
                  src={BLEHoverIcon}
                  alt="connected"
                />
                <div className="text-md font-bold text-blue-500">Connected</div>
              </div>
            </div>
            <div></div>
          </div>
        </div>
      )}
      <div className="fixed top-0 flex w-full flex-col items-center justify-center space-y-3">
        <div className="bg-gradient-to-r from-cyan-500 to-blue-500 bg-clip-text pt-10 text-5xl font-bold text-transparent">
          LunchTrak
        </div>
        <div className="bg-gradient-to-r from-violet-500 to-fuchsia-500 bg-clip-text text-lg text-transparent">
          No more waiting for your food
        </div>
      </div>
      <div className="flex h-full flex-col items-center justify-center space-y-5">
        {pageState == PageState.LANDING && (
          <>
            <div className="">
              <button
                className="rounded-full bg-gradient-to-r from-blue-900 to-violet-500 py-2 px-4 font-bold text-white hover:from-fuchsia-600 hover:to-pink-500"
                onClick={handleConnect}
              >
                Connect to Device
              </button>
            </div>
          </>
        )}

        {pageState == PageState.CONNECTED && (
          <>
            <div className="w-64">
              <input
                type="text"
                className="block h-full w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
                placeholder="Please enter your student ID"
                required
                value={text}
                onChange={(e) => setText(e.target.value)}
              />
            </div>
            <div className="">
              {showConfirmation ? (
                <div
                  className={`${
                    successWriteData ? "text-green-500" : "text-red-500"
                  } py-2 px-4 font-bold`}
                >
                  {successWriteData ? "Success!" : "Failed"}
                </div>
              ) : (
                <button
                  className="rounded-lg py-2 px-4 font-bold text-white hover:bg-gray-900"
                  onClick={handleWriteData}
                >
                  Confirm
                </button>
              )}
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default Pair;
