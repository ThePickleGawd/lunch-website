import { useEffect, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useBtDevice } from "../hooks/useBtDevice";
import { useSleep } from "../hooks/useSleep";

enum PageState {
  LANDING,
  CONNECTED,
  CONFIRMATION,
}

const Home: NextPage = () => {
  const [pageState, setPageState] = useState<PageState>(PageState.LANDING);
  const [text, setText] = useState("");
  const [successWriteData, setSuccessWriteData] = useState(false);
  const [schoolID, setSchoolID] = useState("Loading...");
  const [studentID, setStudentID] = useState("Loading...");

  const { connect, isConnected, writeStudentID, readStudentID, readSchoolID } =
    useBtDevice();
  const { sleep } = useSleep();

  useEffect(() => {
    if (pageState === PageState.LANDING && isConnected) {
      setPageState(PageState.CONNECTED);
    }
  }, [isConnected, pageState]);

  const handleConnect = async () => {
    await connect();
  };

  const handleWriteData = async () => {
    const success = await writeStudentID(text);
    setSuccessWriteData(success);
    setPageState(PageState.CONFIRMATION);

    if (!success) return;

    const schoolID_val = await readSchoolID();
    const studentID_val = await readStudentID();

    setSchoolID(schoolID_val);
    setStudentID(studentID_val);
  };

  return (
    <div className="h-screen overflow-hidden">
      <Head>
        <title>Lunch Line Utility Website</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="fixed top-0 w-full flex flex-col items-center justify-center space-y-3">
        <div className="text-5xl font-bold pt-10">SpEAT!</div>
        <div className="text-lg">(The Lunch Line FasTrak Device)!</div>
      </div>
      <div className="h-full flex flex-col items-center justify-center space-y-5">
        {pageState == PageState.LANDING && (
          <>
            <div className="">
              <button
                className="bg-gray-900 rounded-lg p-10 font-bold text-2xl"
                onClick={handleConnect}
              >
                Connect to Device
              </button>
            </div>
          </>
        )}

        {pageState == PageState.CONNECTED && (
          <>
            <div className="">
              <input
                type="text"
                className="w-full h-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="950..."
                required
                value={text}
                onChange={(e) => setText(e.target.value)}
              />
            </div>
            <div className="">
              <button onClick={handleWriteData}>Write to Device</button>
            </div>
          </>
        )}

        {pageState == PageState.CONFIRMATION && (
          <>
            <div className="bg-gray-900 rounded-lg flex flex-col justify-center items-center p-5">
              <div
                className={` ${
                  successWriteData ? "text-green-500" : "text-red-500"
                } font-bold text-5xl pt-3`}
              >
                {successWriteData ? "Success!" : "Failure!"}
              </div>
              <div className="bg-gray-500 m-5 p-12 rounded-lg">
                <div className="text-gray-300 font-bold text-2xl">
                  Device Settings
                </div>
                <div className="text-gray-100 font-bold text-xl">
                  {`School ID: ${schoolID}`}
                </div>
                <div className="text-gray-100 font-bold text-xl">
                  {`Student ID: ${studentID}`}
                </div>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default Home;
